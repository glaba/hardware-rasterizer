module trunc_testbench();

timeunit 10ns;

timeprecision 1ns;

logic clock;
logic[35:0] n1, n2;
logic[7:0] t1;
logic[7:0] t2;

TruncateNums36 trunc(.*);

// Toggle the clock
// #1 means wait for a delay of 1 timeunit
always begin : CLOCK_GENERATION
#1	clock = ~clock;
end

initial begin: CLOCK_INITIALIZATION
	clock = 1;
end 

// Test generated by following script

// 		let output = "";

// 		const n1 = "000000010000001100000111000011110001";

// 		for (let i = 0; i <= 28; i++) {
// 			const substr = n1.substr(i, 8);

// 			let n2_arr = [];
// 			for (let j = 0; j < i; j++) n2_arr.push("0");
// 			n2_arr.push("1");
// 			for (let j = i; j < 35; j++) n2_arr.push((Math.random() > 0.5) ? "1" : "0");

// 			const n2 = n2_arr.join("");

// 			output += `#1\tn2 = 36'b${n2};\n`;
// 			output += `#1\tassert (t1 == 8'b${substr});\n`;
// 			output += `#1\tassert (t2 == 8'b${n2.substr(i, 8)});\n\n`;
// 		}

initial begin: TEST	
	n1 = 36'b000000010000001100000111000011110001;

// Check that all bits work
#1	n2 = 36'b011111010000001100001000010000000101;
#1	assert (t1 == 8'b00000010);
	assert (t2 == 8'b11111010);

#1	n2 = 36'b001101000000100101000111010101111000;
#1	assert (t1 == 8'b00000100);
	assert (t2 == 8'b11010000);

#1	n2 = 36'b000100000000011011011010010100101110;
#1	assert (t1 == 8'b00001000);
	assert (t2 == 8'b10000000);

#1	n2 = 36'b000011001011101110101110110010101111;
#1	assert (t1 == 8'b00010000);
	assert (t2 == 8'b11001011);

#1	n2 = 36'b000001110011000111111111100000010010;
#1	assert (t1 == 8'b00100000);
	assert (t2 == 8'b11100110);

#1	n2 = 36'b000000100111011111011001001100100001;
#1	assert (t1 == 8'b01000000);
	assert (t2 == 8'b10011101);

#1	n2 = 36'b000000010010111111100100111000010110;
#1	assert (t1 == 8'b10000001);
	assert (t2 == 8'b10010111);

#1	n2 = 36'b000000001101010101000001110000000010;
#1	assert (t1 == 8'b00000011);
	assert (t2 == 8'b11010101);

#1	n2 = 36'b000000000111111110001111001100110100;
#1	assert (t1 == 8'b00000110);
	assert (t2 == 8'b11111111);

#1	n2 = 36'b000000000011010110110011011010100000;
#1	assert (t1 == 8'b00001100);
	assert (t2 == 8'b11010110);

#1	n2 = 36'b000000000001110011010011101111011001;
#1	assert (t1 == 8'b00011000);
	assert (t2 == 8'b11100110);

#1	n2 = 36'b000000000000111100111011100110110000;
#1	assert (t1 == 8'b00110000);
	assert (t2 == 8'b11110011);

#1	n2 = 36'b000000000000010111001001101010000111;
#1	assert (t1 == 8'b01100000);
	assert (t2 == 8'b10111001);

#1	n2 = 36'b000000000000001101111001100100101111;
#1	assert (t1 == 8'b11000001);
	assert (t2 == 8'b11011110);

#1	n2 = 36'b000000000000000101110011101011101001;
#1	assert (t1 == 8'b10000011);
	assert (t2 == 8'b10111001);

#1	n2 = 36'b000000000000000011100010101100111000;
#1	assert (t1 == 8'b00000111);
	assert (t2 == 8'b11100010);

#1	n2 = 36'b000000000000000001110101000011111010;
#1	assert (t1 == 8'b00001110);
	assert (t2 == 8'b11101010);

#1	n2 = 36'b000000000000000000110010000010111111;
#1	assert (t1 == 8'b00011100);
	assert (t2 == 8'b11001000);

#1	n2 = 36'b000000000000000000010110011101100100;
#1	assert (t1 == 8'b00111000);
	assert (t2 == 8'b10110011);

#1	n2 = 36'b000000000000000000001011111011001100;
#1	assert (t1 == 8'b01110000);
	assert (t2 == 8'b10111110);

#1	n2 = 36'b000000000000000000000100000011101100;
#1	assert (t1 == 8'b11100001);
	assert (t2 == 8'b10000001);

#1	n2 = 36'b000000000000000000000011010011000100;
#1	assert (t1 == 8'b11000011);
	assert (t2 == 8'b11010011);

#1	n2 = 36'b000000000000000000000001000100101110;
#1	assert (t1 == 8'b10000111);
	assert (t2 == 8'b10001001);

#1	n2 = 36'b000000000000000000000000101101111001;
#1	assert (t1 == 8'b00001111);
	assert (t2 == 8'b10110111);

#1	n2 = 36'b000000000000000000000000011101110000;
#1	assert (t1 == 8'b00011110);
	assert (t2 == 8'b11101110);

#1	n2 = 36'b000000000000000000000000001100011110;
#1	assert (t1 == 8'b00111100);
	assert (t2 == 8'b11000111);

#1	n2 = 36'b000000000000000000000000000111111000;
#1	assert (t1 == 8'b01111000);
	assert (t2 == 8'b11111100);

#1	n2 = 36'b000000000000000000000000000011111000;
#1	assert (t1 == 8'b11110001);
	assert (t2 == 8'b11111000);

#1	n2 = 36'b000000000000000000000000000001111000;
#1	assert (t1 == 8'b11100010);
	assert (t2 == 8'b11110000);

#1	n2 = 36'b000000000000000000000000000000111000;
#1	assert (t1 == 8'b11000100);
	assert (t2 == 8'b11100000);

#1	n2 = 36'b000000000000000000000000000000011000;
#1	assert (t1 == 8'b10001000);
	assert (t2 == 8'b11000000);

#1	n2 = 36'b000000000000000000000000000000001000;
#1	assert (t1 == 8'b00010000);
	assert (t2 == 8'b10000000);

#1	n2 = 36'b000000000000000000000000000000000100;
#1	assert (t1 == 8'b00100000);
	assert (t2 == 8'b10000000);

#1	n2 = 36'b000000000000000000000000000000000010;
#1	assert (t1 == 8'b01000000);
	assert (t2 == 8'b10000000);

#1	n2 = 36'b000000000000000000000000000000000001;
#1	assert (t1 == 8'b10000000);
	assert (t2 == 8'b10000000);

// Check that taking the absolute value works (picking just one random sample)
#1	n2 = 36'b111111101101000000011011000111101010; // Negative 36'b000000010010111111100100111000010110;
#1	assert (t1 == 8'b10000001);
	assert (t2 == 8'b10010111);
end
endmodule