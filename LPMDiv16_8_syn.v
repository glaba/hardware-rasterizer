// megafunction wizard: %LPM_DIVIDE%
// GENERATION: STANDARD
// VERSION: WM1.0
// MODULE: LPM_DIVIDE 

// ============================================================
// File Name: LPMDiv16_8.v
// Megafunction Name(s):
// 			LPM_DIVIDE
//
// Simulation Library Files(s):
// 			lpm
// ============================================================
// ************************************************************
// THIS IS A WIZARD-GENERATED FILE. DO NOT EDIT THIS FILE!
//
// 18.0.0 Build 614 04/24/2018 SJ Lite Edition
// ************************************************************


//Copyright (C) 2018  Intel Corporation. All rights reserved.
//Your use of Intel Corporation's design tools, logic functions 
//and other software and tools, and its AMPP partner logic 
//functions, and any output files from any of the foregoing 
//(including device programming or simulation files), and any 
//associated documentation or information are expressly subject 
//to the terms and conditions of the Intel Program License 
//Subscription Agreement, the Intel Quartus Prime License Agreement,
//the Intel FPGA IP License Agreement, or other applicable license
//agreement, including, without limitation, that your use is for
//the sole purpose of programming logic devices manufactured by
//Intel and sold by Intel or its authorized distributors.  Please
//refer to the applicable agreement for further details.


//lpm_divide DEVICE_FAMILY="Cyclone IV E" LPM_DREPRESENTATION="UNSIGNED" LPM_NREPRESENTATION="UNSIGNED" LPM_PIPELINE=4 LPM_REMAINDERPOSITIVE="TRUE" LPM_WIDTHD=8 LPM_WIDTHN=16 MAXIMIZE_SPEED=6 clock denom numer quotient remain
//VERSION_BEGIN 18.0 cbx_cycloneii 2018:04:18:06:50:44:SJ cbx_lpm_abs 2018:04:18:06:50:44:SJ cbx_lpm_add_sub 2018:04:18:06:50:44:SJ cbx_lpm_divide 2018:04:18:06:50:44:SJ cbx_mgl 2018:04:18:07:37:08:SJ cbx_nadder 2018:04:18:06:50:44:SJ cbx_stratix 2018:04:18:06:50:44:SJ cbx_stratixii 2018:04:18:06:50:44:SJ cbx_util_mgl 2018:04:18:06:50:44:SJ  VERSION_END
// synthesis VERILOG_INPUT_VERSION VERILOG_2001
// altera message_off 10463



//sign_div_unsign DEN_REPRESENTATION="UNSIGNED" DEN_WIDTH=8 LPM_PIPELINE=4 MAXIMIZE_SPEED=6 NUM_REPRESENTATION="UNSIGNED" NUM_WIDTH=16 SKIP_BITS=0 clock denominator numerator quotient remainder
//VERSION_BEGIN 18.0 cbx_cycloneii 2018:04:18:06:50:44:SJ cbx_lpm_abs 2018:04:18:06:50:44:SJ cbx_lpm_add_sub 2018:04:18:06:50:44:SJ cbx_lpm_divide 2018:04:18:06:50:44:SJ cbx_mgl 2018:04:18:07:37:08:SJ cbx_nadder 2018:04:18:06:50:44:SJ cbx_stratix 2018:04:18:06:50:44:SJ cbx_stratixii 2018:04:18:06:50:44:SJ cbx_util_mgl 2018:04:18:06:50:44:SJ  VERSION_END


//alt_u_div DEVICE_FAMILY="Cyclone IV E" LPM_PIPELINE=4 MAXIMIZE_SPEED=6 SKIP_BITS=0 WIDTH_D=8 WIDTH_N=16 WIDTH_Q=16 WIDTH_R=8 clock denominator numerator quotient remainder
//VERSION_BEGIN 18.0 cbx_cycloneii 2018:04:18:06:50:44:SJ cbx_lpm_abs 2018:04:18:06:50:44:SJ cbx_lpm_add_sub 2018:04:18:06:50:44:SJ cbx_lpm_divide 2018:04:18:06:50:44:SJ cbx_mgl 2018:04:18:07:37:08:SJ cbx_nadder 2018:04:18:06:50:44:SJ cbx_stratix 2018:04:18:06:50:44:SJ cbx_stratixii 2018:04:18:06:50:44:SJ cbx_util_mgl 2018:04:18:06:50:44:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone IV E" LPM_DIRECTION="SUB" LPM_WIDTH=1 cout dataa datab result
//VERSION_BEGIN 18.0 cbx_cycloneii 2018:04:18:06:50:44:SJ cbx_lpm_add_sub 2018:04:18:06:50:44:SJ cbx_mgl 2018:04:18:07:37:08:SJ cbx_nadder 2018:04:18:06:50:44:SJ cbx_stratix 2018:04:18:06:50:44:SJ cbx_stratixii 2018:04:18:06:50:44:SJ  VERSION_END

//synthesis_resources = 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  LPMDiv16_8_add_sub
	( 
	cout,
	dataa,
	datab,
	result) /* synthesis synthesis_clearbox=1 */;
	output   cout;
	input   [0:0]  dataa;
	input   [0:0]  datab;
	output   [0:0]  result;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   [0:0]  dataa;
	tri0   [0:0]  datab;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire  [0:0]  carry_eqn;
	wire  cin_wire;
	wire  [0:0]  datab_node;
	wire  [0:0]  sum_eqn;

	assign
		carry_eqn = {((dataa[0] & datab_node[0]) | ((dataa[0] | datab_node[0]) & cin_wire))},
		cin_wire = 1'b1,
		cout = carry_eqn[0],
		datab_node = (~ datab),
		result = sum_eqn,
		sum_eqn = {((dataa[0] ^ datab_node[0]) ^ cin_wire)};
endmodule //LPMDiv16_8_add_sub


//lpm_add_sub DEVICE_FAMILY="Cyclone IV E" LPM_DIRECTION="SUB" LPM_WIDTH=2 cout dataa datab result
//VERSION_BEGIN 18.0 cbx_cycloneii 2018:04:18:06:50:44:SJ cbx_lpm_add_sub 2018:04:18:06:50:44:SJ cbx_mgl 2018:04:18:07:37:08:SJ cbx_nadder 2018:04:18:06:50:44:SJ cbx_stratix 2018:04:18:06:50:44:SJ cbx_stratixii 2018:04:18:06:50:44:SJ  VERSION_END

//synthesis_resources = 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  LPMDiv16_8_add_sub1
	( 
	cout,
	dataa,
	datab,
	result) /* synthesis synthesis_clearbox=1 */;
	output   cout;
	input   [1:0]  dataa;
	input   [1:0]  datab;
	output   [1:0]  result;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   [1:0]  dataa;
	tri0   [1:0]  datab;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire  [1:0]  carry_eqn;
	wire  cin_wire;
	wire  [1:0]  datab_node;
	wire  [1:0]  sum_eqn;

	assign
		carry_eqn = {((dataa[1] & datab_node[1]) | ((dataa[1] | datab_node[1]) & carry_eqn[0])), ((dataa[0] & datab_node[0]) | ((dataa[0] | datab_node[0]) & cin_wire))},
		cin_wire = 1'b1,
		cout = carry_eqn[1],
		datab_node = (~ datab),
		result = sum_eqn,
		sum_eqn = {((dataa[1] ^ datab_node[1]) ^ carry_eqn[0]), ((dataa[0] ^ datab_node[0]) ^ cin_wire)};
endmodule //LPMDiv16_8_add_sub1


//lpm_add_sub DEVICE_FAMILY="Cyclone IV E" LPM_DIRECTION="SUB" LPM_WIDTH=9 cout dataa datab result
//VERSION_BEGIN 18.0 cbx_cycloneii 2018:04:18:06:50:44:SJ cbx_lpm_add_sub 2018:04:18:06:50:44:SJ cbx_mgl 2018:04:18:07:37:08:SJ cbx_nadder 2018:04:18:06:50:44:SJ cbx_stratix 2018:04:18:06:50:44:SJ cbx_stratixii 2018:04:18:06:50:44:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone IV E" LPM_DIRECTION="SUB" LPM_WIDTH=9 cout dataa datab result
//VERSION_BEGIN 18.0 cbx_cycloneii 2018:04:18:06:50:44:SJ cbx_lpm_add_sub 2018:04:18:06:50:44:SJ cbx_mgl 2018:04:18:07:37:08:SJ cbx_nadder 2018:04:18:06:50:44:SJ cbx_stratix 2018:04:18:06:50:44:SJ cbx_stratixii 2018:04:18:06:50:44:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone IV E" LPM_DIRECTION="SUB" LPM_WIDTH=9 cout dataa datab result
//VERSION_BEGIN 18.0 cbx_cycloneii 2018:04:18:06:50:44:SJ cbx_lpm_add_sub 2018:04:18:06:50:44:SJ cbx_mgl 2018:04:18:07:37:08:SJ cbx_nadder 2018:04:18:06:50:44:SJ cbx_stratix 2018:04:18:06:50:44:SJ cbx_stratixii 2018:04:18:06:50:44:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone IV E" LPM_DIRECTION="SUB" LPM_WIDTH=9 cout dataa datab result
//VERSION_BEGIN 18.0 cbx_cycloneii 2018:04:18:06:50:44:SJ cbx_lpm_add_sub 2018:04:18:06:50:44:SJ cbx_mgl 2018:04:18:07:37:08:SJ cbx_nadder 2018:04:18:06:50:44:SJ cbx_stratix 2018:04:18:06:50:44:SJ cbx_stratixii 2018:04:18:06:50:44:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone IV E" LPM_DIRECTION="SUB" LPM_WIDTH=9 cout dataa datab result
//VERSION_BEGIN 18.0 cbx_cycloneii 2018:04:18:06:50:44:SJ cbx_lpm_add_sub 2018:04:18:06:50:44:SJ cbx_mgl 2018:04:18:07:37:08:SJ cbx_nadder 2018:04:18:06:50:44:SJ cbx_stratix 2018:04:18:06:50:44:SJ cbx_stratixii 2018:04:18:06:50:44:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone IV E" LPM_DIRECTION="SUB" LPM_WIDTH=9 cout dataa datab result
//VERSION_BEGIN 18.0 cbx_cycloneii 2018:04:18:06:50:44:SJ cbx_lpm_add_sub 2018:04:18:06:50:44:SJ cbx_mgl 2018:04:18:07:37:08:SJ cbx_nadder 2018:04:18:06:50:44:SJ cbx_stratix 2018:04:18:06:50:44:SJ cbx_stratixii 2018:04:18:06:50:44:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone IV E" LPM_DIRECTION="SUB" LPM_WIDTH=3 cout dataa datab result
//VERSION_BEGIN 18.0 cbx_cycloneii 2018:04:18:06:50:44:SJ cbx_lpm_add_sub 2018:04:18:06:50:44:SJ cbx_mgl 2018:04:18:07:37:08:SJ cbx_nadder 2018:04:18:06:50:44:SJ cbx_stratix 2018:04:18:06:50:44:SJ cbx_stratixii 2018:04:18:06:50:44:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone IV E" LPM_DIRECTION="SUB" LPM_WIDTH=4 cout dataa datab result
//VERSION_BEGIN 18.0 cbx_cycloneii 2018:04:18:06:50:44:SJ cbx_lpm_add_sub 2018:04:18:06:50:44:SJ cbx_mgl 2018:04:18:07:37:08:SJ cbx_nadder 2018:04:18:06:50:44:SJ cbx_stratix 2018:04:18:06:50:44:SJ cbx_stratixii 2018:04:18:06:50:44:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone IV E" LPM_DIRECTION="SUB" LPM_WIDTH=5 cout dataa datab result
//VERSION_BEGIN 18.0 cbx_cycloneii 2018:04:18:06:50:44:SJ cbx_lpm_add_sub 2018:04:18:06:50:44:SJ cbx_mgl 2018:04:18:07:37:08:SJ cbx_nadder 2018:04:18:06:50:44:SJ cbx_stratix 2018:04:18:06:50:44:SJ cbx_stratixii 2018:04:18:06:50:44:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone IV E" LPM_DIRECTION="SUB" LPM_WIDTH=6 cout dataa datab result
//VERSION_BEGIN 18.0 cbx_cycloneii 2018:04:18:06:50:44:SJ cbx_lpm_add_sub 2018:04:18:06:50:44:SJ cbx_mgl 2018:04:18:07:37:08:SJ cbx_nadder 2018:04:18:06:50:44:SJ cbx_stratix 2018:04:18:06:50:44:SJ cbx_stratixii 2018:04:18:06:50:44:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone IV E" LPM_DIRECTION="SUB" LPM_WIDTH=7 cout dataa datab result
//VERSION_BEGIN 18.0 cbx_cycloneii 2018:04:18:06:50:44:SJ cbx_lpm_add_sub 2018:04:18:06:50:44:SJ cbx_mgl 2018:04:18:07:37:08:SJ cbx_nadder 2018:04:18:06:50:44:SJ cbx_stratix 2018:04:18:06:50:44:SJ cbx_stratixii 2018:04:18:06:50:44:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone IV E" LPM_DIRECTION="SUB" LPM_WIDTH=8 cout dataa datab result
//VERSION_BEGIN 18.0 cbx_cycloneii 2018:04:18:06:50:44:SJ cbx_lpm_add_sub 2018:04:18:06:50:44:SJ cbx_mgl 2018:04:18:07:37:08:SJ cbx_nadder 2018:04:18:06:50:44:SJ cbx_stratix 2018:04:18:06:50:44:SJ cbx_stratixii 2018:04:18:06:50:44:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone IV E" LPM_DIRECTION="SUB" LPM_WIDTH=9 cout dataa datab result
//VERSION_BEGIN 18.0 cbx_cycloneii 2018:04:18:06:50:44:SJ cbx_lpm_add_sub 2018:04:18:06:50:44:SJ cbx_mgl 2018:04:18:07:37:08:SJ cbx_nadder 2018:04:18:06:50:44:SJ cbx_stratix 2018:04:18:06:50:44:SJ cbx_stratixii 2018:04:18:06:50:44:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone IV E" LPM_DIRECTION="SUB" LPM_WIDTH=9 cout dataa datab result
//VERSION_BEGIN 18.0 cbx_cycloneii 2018:04:18:06:50:44:SJ cbx_lpm_add_sub 2018:04:18:06:50:44:SJ cbx_mgl 2018:04:18:07:37:08:SJ cbx_nadder 2018:04:18:06:50:44:SJ cbx_stratix 2018:04:18:06:50:44:SJ cbx_stratixii 2018:04:18:06:50:44:SJ  VERSION_END

//synthesis_resources = lut 119 reg 196 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
(* ALTERA_ATTRIBUTE = {"{-to DFFQuotient[0]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[1]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[2]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[3]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[4]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[5]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[6]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[7]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[8]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[9]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[10]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[11]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[12]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[13]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[14]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[15]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[16]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[17]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[18]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[19]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[20]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[21]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[22]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[23]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[24]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[25]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[26]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[27]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[28]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[29]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[30]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[31]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[32]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[33]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[34]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[35]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[36]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[37]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[38]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[39]} POWER_UP_LEVEL=LOW;",
		"{-to DFFQuotient[40]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[41]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[42]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[43]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[44]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[45]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[46]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[47]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[48]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[49]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[50]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[51]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[52]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[53]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[54]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[55]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[56]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[57]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[58]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[59]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[60]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[61]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[62]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[63]} POWER_UP_LEVEL=LOW"} *)
module  LPMDiv16_8_alt_u_div
	( 
	clock,
	denominator,
	numerator,
	quotient,
	remainder) /* synthesis synthesis_clearbox=1 */;
	input   clock;
	input   [7:0]  denominator;
	input   [15:0]  numerator;
	output   [15:0]  quotient;
	output   [7:0]  remainder;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   clock;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=HIGH"} *)
	reg	[31:0]	DFFDenominator;
	reg	[63:0]	DFFNumerator;
	wire	[63:0]	wire_DFFQuotient_d;
	reg	[63:0]	DFFQuotient;
	reg	[35:0]	DFFStage;
	wire  wire_add_sub_0_cout;
	wire  [0:0]   wire_add_sub_0_result;
	wire  wire_add_sub_1_cout;
	wire  [1:0]   wire_add_sub_1_result;
	wire	[9:0]	wire_add_sub_10_result_int;
	wire	wire_add_sub_10_cout;
	wire	[8:0]	wire_add_sub_10_dataa;
	wire	[8:0]	wire_add_sub_10_datab;
	wire	[8:0]	wire_add_sub_10_result;
	wire	[9:0]	wire_add_sub_11_result_int;
	wire	wire_add_sub_11_cout;
	wire	[8:0]	wire_add_sub_11_dataa;
	wire	[8:0]	wire_add_sub_11_datab;
	wire	[8:0]	wire_add_sub_11_result;
	wire	[9:0]	wire_add_sub_12_result_int;
	wire	wire_add_sub_12_cout;
	wire	[8:0]	wire_add_sub_12_dataa;
	wire	[8:0]	wire_add_sub_12_datab;
	wire	[8:0]	wire_add_sub_12_result;
	wire	[9:0]	wire_add_sub_13_result_int;
	wire	wire_add_sub_13_cout;
	wire	[8:0]	wire_add_sub_13_dataa;
	wire	[8:0]	wire_add_sub_13_datab;
	wire	[8:0]	wire_add_sub_13_result;
	wire	[9:0]	wire_add_sub_14_result_int;
	wire	wire_add_sub_14_cout;
	wire	[8:0]	wire_add_sub_14_dataa;
	wire	[8:0]	wire_add_sub_14_datab;
	wire	[8:0]	wire_add_sub_14_result;
	wire	[9:0]	wire_add_sub_15_result_int;
	wire	wire_add_sub_15_cout;
	wire	[8:0]	wire_add_sub_15_dataa;
	wire	[8:0]	wire_add_sub_15_datab;
	wire	[8:0]	wire_add_sub_15_result;
	wire	[3:0]	wire_add_sub_2_result_int;
	wire	wire_add_sub_2_cout;
	wire	[2:0]	wire_add_sub_2_dataa;
	wire	[2:0]	wire_add_sub_2_datab;
	wire	[2:0]	wire_add_sub_2_result;
	wire	[4:0]	wire_add_sub_3_result_int;
	wire	wire_add_sub_3_cout;
	wire	[3:0]	wire_add_sub_3_dataa;
	wire	[3:0]	wire_add_sub_3_datab;
	wire	[3:0]	wire_add_sub_3_result;
	wire	[5:0]	wire_add_sub_4_result_int;
	wire	wire_add_sub_4_cout;
	wire	[4:0]	wire_add_sub_4_dataa;
	wire	[4:0]	wire_add_sub_4_datab;
	wire	[4:0]	wire_add_sub_4_result;
	wire	[6:0]	wire_add_sub_5_result_int;
	wire	wire_add_sub_5_cout;
	wire	[5:0]	wire_add_sub_5_dataa;
	wire	[5:0]	wire_add_sub_5_datab;
	wire	[5:0]	wire_add_sub_5_result;
	wire	[7:0]	wire_add_sub_6_result_int;
	wire	wire_add_sub_6_cout;
	wire	[6:0]	wire_add_sub_6_dataa;
	wire	[6:0]	wire_add_sub_6_datab;
	wire	[6:0]	wire_add_sub_6_result;
	wire	[8:0]	wire_add_sub_7_result_int;
	wire	wire_add_sub_7_cout;
	wire	[7:0]	wire_add_sub_7_dataa;
	wire	[7:0]	wire_add_sub_7_datab;
	wire	[7:0]	wire_add_sub_7_result;
	wire	[9:0]	wire_add_sub_8_result_int;
	wire	wire_add_sub_8_cout;
	wire	[8:0]	wire_add_sub_8_dataa;
	wire	[8:0]	wire_add_sub_8_datab;
	wire	[8:0]	wire_add_sub_8_result;
	wire	[9:0]	wire_add_sub_9_result_int;
	wire	wire_add_sub_9_cout;
	wire	[8:0]	wire_add_sub_9_dataa;
	wire	[8:0]	wire_add_sub_9_datab;
	wire	[8:0]	wire_add_sub_9_result;
	wire aclr;
	wire clk_en;
	wire  [152:0]  DenominatorIn;
	wire  [152:0]  DenominatorIn_tmp;
	wire  gnd_wire;
	wire  [271:0]  nose;
	wire  [271:0]  NumeratorIn;
	wire  [271:0]  NumeratorIn_tmp;
	wire  [143:0]  prestg;
	wire  [15:0]  quotient_tmp;
	wire  [135:0]  sel;
	wire  [271:0]  selnose;
	wire  [152:0]  StageIn;
	wire  [152:0]  StageIn_tmp;
	wire  [143:0]  StageOut;
	wire  vcc_wire;

	// synopsys translate_off
	initial
		DFFDenominator = {32{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator <= {32{1'b1}};
		else if  (clk_en == 1'b1)   DFFDenominator <= {DFFDenominator[23:0], denominator};
	// synopsys translate_off
	initial
		DFFNumerator = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFNumerator <= 64'b0;
		else if  (clk_en == 1'b1)   DFFNumerator <= {DFFNumerator[47:0], numerator};
	// synopsys translate_off
	initial
		DFFQuotient[0:0] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[0:0] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[0:0] <= wire_DFFQuotient_d[0:0];
	// synopsys translate_off
	initial
		DFFQuotient[1:1] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[1:1] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[1:1] <= wire_DFFQuotient_d[1:1];
	// synopsys translate_off
	initial
		DFFQuotient[2:2] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[2:2] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[2:2] <= wire_DFFQuotient_d[2:2];
	// synopsys translate_off
	initial
		DFFQuotient[3:3] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[3:3] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[3:3] <= wire_DFFQuotient_d[3:3];
	// synopsys translate_off
	initial
		DFFQuotient[4:4] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[4:4] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[4:4] <= wire_DFFQuotient_d[4:4];
	// synopsys translate_off
	initial
		DFFQuotient[5:5] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[5:5] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[5:5] <= wire_DFFQuotient_d[5:5];
	// synopsys translate_off
	initial
		DFFQuotient[6:6] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[6:6] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[6:6] <= wire_DFFQuotient_d[6:6];
	// synopsys translate_off
	initial
		DFFQuotient[7:7] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[7:7] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[7:7] <= wire_DFFQuotient_d[7:7];
	// synopsys translate_off
	initial
		DFFQuotient[8:8] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[8:8] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[8:8] <= wire_DFFQuotient_d[8:8];
	// synopsys translate_off
	initial
		DFFQuotient[9:9] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[9:9] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[9:9] <= wire_DFFQuotient_d[9:9];
	// synopsys translate_off
	initial
		DFFQuotient[10:10] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[10:10] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[10:10] <= wire_DFFQuotient_d[10:10];
	// synopsys translate_off
	initial
		DFFQuotient[11:11] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[11:11] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[11:11] <= wire_DFFQuotient_d[11:11];
	// synopsys translate_off
	initial
		DFFQuotient[12:12] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[12:12] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[12:12] <= wire_DFFQuotient_d[12:12];
	// synopsys translate_off
	initial
		DFFQuotient[13:13] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[13:13] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[13:13] <= wire_DFFQuotient_d[13:13];
	// synopsys translate_off
	initial
		DFFQuotient[14:14] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[14:14] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[14:14] <= wire_DFFQuotient_d[14:14];
	// synopsys translate_off
	initial
		DFFQuotient[15:15] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[15:15] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[15:15] <= wire_DFFQuotient_d[15:15];
	// synopsys translate_off
	initial
		DFFQuotient[16:16] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[16:16] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[16:16] <= wire_DFFQuotient_d[16:16];
	// synopsys translate_off
	initial
		DFFQuotient[17:17] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[17:17] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[17:17] <= wire_DFFQuotient_d[17:17];
	// synopsys translate_off
	initial
		DFFQuotient[18:18] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[18:18] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[18:18] <= wire_DFFQuotient_d[18:18];
	// synopsys translate_off
	initial
		DFFQuotient[19:19] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[19:19] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[19:19] <= wire_DFFQuotient_d[19:19];
	// synopsys translate_off
	initial
		DFFQuotient[20:20] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[20:20] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[20:20] <= wire_DFFQuotient_d[20:20];
	// synopsys translate_off
	initial
		DFFQuotient[21:21] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[21:21] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[21:21] <= wire_DFFQuotient_d[21:21];
	// synopsys translate_off
	initial
		DFFQuotient[22:22] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[22:22] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[22:22] <= wire_DFFQuotient_d[22:22];
	// synopsys translate_off
	initial
		DFFQuotient[23:23] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[23:23] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[23:23] <= wire_DFFQuotient_d[23:23];
	// synopsys translate_off
	initial
		DFFQuotient[24:24] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[24:24] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[24:24] <= wire_DFFQuotient_d[24:24];
	// synopsys translate_off
	initial
		DFFQuotient[25:25] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[25:25] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[25:25] <= wire_DFFQuotient_d[25:25];
	// synopsys translate_off
	initial
		DFFQuotient[26:26] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[26:26] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[26:26] <= wire_DFFQuotient_d[26:26];
	// synopsys translate_off
	initial
		DFFQuotient[27:27] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[27:27] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[27:27] <= wire_DFFQuotient_d[27:27];
	// synopsys translate_off
	initial
		DFFQuotient[28:28] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[28:28] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[28:28] <= wire_DFFQuotient_d[28:28];
	// synopsys translate_off
	initial
		DFFQuotient[29:29] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[29:29] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[29:29] <= wire_DFFQuotient_d[29:29];
	// synopsys translate_off
	initial
		DFFQuotient[30:30] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[30:30] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[30:30] <= wire_DFFQuotient_d[30:30];
	// synopsys translate_off
	initial
		DFFQuotient[31:31] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[31:31] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[31:31] <= wire_DFFQuotient_d[31:31];
	// synopsys translate_off
	initial
		DFFQuotient[32:32] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[32:32] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[32:32] <= wire_DFFQuotient_d[32:32];
	// synopsys translate_off
	initial
		DFFQuotient[33:33] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[33:33] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[33:33] <= wire_DFFQuotient_d[33:33];
	// synopsys translate_off
	initial
		DFFQuotient[34:34] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[34:34] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[34:34] <= wire_DFFQuotient_d[34:34];
	// synopsys translate_off
	initial
		DFFQuotient[35:35] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[35:35] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[35:35] <= wire_DFFQuotient_d[35:35];
	// synopsys translate_off
	initial
		DFFQuotient[36:36] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[36:36] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[36:36] <= wire_DFFQuotient_d[36:36];
	// synopsys translate_off
	initial
		DFFQuotient[37:37] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[37:37] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[37:37] <= wire_DFFQuotient_d[37:37];
	// synopsys translate_off
	initial
		DFFQuotient[38:38] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[38:38] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[38:38] <= wire_DFFQuotient_d[38:38];
	// synopsys translate_off
	initial
		DFFQuotient[39:39] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[39:39] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[39:39] <= wire_DFFQuotient_d[39:39];
	// synopsys translate_off
	initial
		DFFQuotient[40:40] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[40:40] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[40:40] <= wire_DFFQuotient_d[40:40];
	// synopsys translate_off
	initial
		DFFQuotient[41:41] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[41:41] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[41:41] <= wire_DFFQuotient_d[41:41];
	// synopsys translate_off
	initial
		DFFQuotient[42:42] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[42:42] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[42:42] <= wire_DFFQuotient_d[42:42];
	// synopsys translate_off
	initial
		DFFQuotient[43:43] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[43:43] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[43:43] <= wire_DFFQuotient_d[43:43];
	// synopsys translate_off
	initial
		DFFQuotient[44:44] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[44:44] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[44:44] <= wire_DFFQuotient_d[44:44];
	// synopsys translate_off
	initial
		DFFQuotient[45:45] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[45:45] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[45:45] <= wire_DFFQuotient_d[45:45];
	// synopsys translate_off
	initial
		DFFQuotient[46:46] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[46:46] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[46:46] <= wire_DFFQuotient_d[46:46];
	// synopsys translate_off
	initial
		DFFQuotient[47:47] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[47:47] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[47:47] <= wire_DFFQuotient_d[47:47];
	// synopsys translate_off
	initial
		DFFQuotient[48:48] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[48:48] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[48:48] <= wire_DFFQuotient_d[48:48];
	// synopsys translate_off
	initial
		DFFQuotient[49:49] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[49:49] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[49:49] <= wire_DFFQuotient_d[49:49];
	// synopsys translate_off
	initial
		DFFQuotient[50:50] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[50:50] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[50:50] <= wire_DFFQuotient_d[50:50];
	// synopsys translate_off
	initial
		DFFQuotient[51:51] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[51:51] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[51:51] <= wire_DFFQuotient_d[51:51];
	// synopsys translate_off
	initial
		DFFQuotient[52:52] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[52:52] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[52:52] <= wire_DFFQuotient_d[52:52];
	// synopsys translate_off
	initial
		DFFQuotient[53:53] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[53:53] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[53:53] <= wire_DFFQuotient_d[53:53];
	// synopsys translate_off
	initial
		DFFQuotient[54:54] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[54:54] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[54:54] <= wire_DFFQuotient_d[54:54];
	// synopsys translate_off
	initial
		DFFQuotient[55:55] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[55:55] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[55:55] <= wire_DFFQuotient_d[55:55];
	// synopsys translate_off
	initial
		DFFQuotient[56:56] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[56:56] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[56:56] <= wire_DFFQuotient_d[56:56];
	// synopsys translate_off
	initial
		DFFQuotient[57:57] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[57:57] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[57:57] <= wire_DFFQuotient_d[57:57];
	// synopsys translate_off
	initial
		DFFQuotient[58:58] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[58:58] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[58:58] <= wire_DFFQuotient_d[58:58];
	// synopsys translate_off
	initial
		DFFQuotient[59:59] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[59:59] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[59:59] <= wire_DFFQuotient_d[59:59];
	// synopsys translate_off
	initial
		DFFQuotient[60:60] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[60:60] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[60:60] <= wire_DFFQuotient_d[60:60];
	// synopsys translate_off
	initial
		DFFQuotient[61:61] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[61:61] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[61:61] <= wire_DFFQuotient_d[61:61];
	// synopsys translate_off
	initial
		DFFQuotient[62:62] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[62:62] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[62:62] <= wire_DFFQuotient_d[62:62];
	// synopsys translate_off
	initial
		DFFQuotient[63:63] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[63:63] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[63:63] <= wire_DFFQuotient_d[63:63];
	assign
		wire_DFFQuotient_d = {DFFQuotient[47:38], (~ selnose[170]), (~ selnose[187]), (~ selnose[204]), (~ selnose[221]), {2{vcc_wire}}, DFFQuotient[31:26], (~ selnose[102]), (~ selnose[119]), (~ selnose[136]), (~ selnose[153]), {6{vcc_wire}}, DFFQuotient[15:14], (~ selnose[34]), (~ selnose[51]), (~ selnose[68]), (~ selnose[85]), {10{vcc_wire}}, (~ selnose[0]), (~ selnose[17]), {14{vcc_wire}}};
	// synopsys translate_off
	initial
		DFFStage = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFStage <= 36'b0;
		else if  (clk_en == 1'b1)   DFFStage <= {StageOut[125:117], StageOut[89:81], StageOut[53:45], StageOut[17:9]};
	LPMDiv16_8_add_sub   add_sub_0
	( 
	.cout(wire_add_sub_0_cout),
	.dataa(NumeratorIn[15]),
	.datab(DenominatorIn[0]),
	.result(wire_add_sub_0_result));
	LPMDiv16_8_add_sub1   add_sub_1
	( 
	.cout(wire_add_sub_1_cout),
	.dataa({StageIn[9], NumeratorIn[30]}),
	.datab(DenominatorIn[10:9]),
	.result(wire_add_sub_1_result));
	assign
		wire_add_sub_10_result_int = wire_add_sub_10_dataa - wire_add_sub_10_datab;
	assign
		wire_add_sub_10_result = wire_add_sub_10_result_int[8:0],
		wire_add_sub_10_cout = ~wire_add_sub_10_result_int[9:9];
	assign
		wire_add_sub_10_dataa = {StageIn[97:90], NumeratorIn[165]},
		wire_add_sub_10_datab = DenominatorIn[98:90];
	assign
		wire_add_sub_11_result_int = wire_add_sub_11_dataa - wire_add_sub_11_datab;
	assign
		wire_add_sub_11_result = wire_add_sub_11_result_int[8:0],
		wire_add_sub_11_cout = ~wire_add_sub_11_result_int[9:9];
	assign
		wire_add_sub_11_dataa = {StageIn[106:99], NumeratorIn[180]},
		wire_add_sub_11_datab = DenominatorIn[107:99];
	assign
		wire_add_sub_12_result_int = wire_add_sub_12_dataa - wire_add_sub_12_datab;
	assign
		wire_add_sub_12_result = wire_add_sub_12_result_int[8:0],
		wire_add_sub_12_cout = ~wire_add_sub_12_result_int[9:9];
	assign
		wire_add_sub_12_dataa = {StageIn[115:108], NumeratorIn[195]},
		wire_add_sub_12_datab = DenominatorIn[116:108];
	assign
		wire_add_sub_13_result_int = wire_add_sub_13_dataa - wire_add_sub_13_datab;
	assign
		wire_add_sub_13_result = wire_add_sub_13_result_int[8:0],
		wire_add_sub_13_cout = ~wire_add_sub_13_result_int[9:9];
	assign
		wire_add_sub_13_dataa = {StageIn[124:117], NumeratorIn[210]},
		wire_add_sub_13_datab = DenominatorIn[125:117];
	assign
		wire_add_sub_14_result_int = wire_add_sub_14_dataa - wire_add_sub_14_datab;
	assign
		wire_add_sub_14_result = wire_add_sub_14_result_int[8:0],
		wire_add_sub_14_cout = ~wire_add_sub_14_result_int[9:9];
	assign
		wire_add_sub_14_dataa = {StageIn[133:126], NumeratorIn[225]},
		wire_add_sub_14_datab = DenominatorIn[134:126];
	assign
		wire_add_sub_15_result_int = wire_add_sub_15_dataa - wire_add_sub_15_datab;
	assign
		wire_add_sub_15_result = wire_add_sub_15_result_int[8:0],
		wire_add_sub_15_cout = ~wire_add_sub_15_result_int[9:9];
	assign
		wire_add_sub_15_dataa = {StageIn[142:135], NumeratorIn[240]},
		wire_add_sub_15_datab = DenominatorIn[143:135];
	assign
		wire_add_sub_2_result_int = wire_add_sub_2_dataa - wire_add_sub_2_datab;
	assign
		wire_add_sub_2_result = wire_add_sub_2_result_int[2:0],
		wire_add_sub_2_cout = ~wire_add_sub_2_result_int[3:3];
	assign
		wire_add_sub_2_dataa = {StageIn[19:18], NumeratorIn[45]},
		wire_add_sub_2_datab = DenominatorIn[20:18];
	assign
		wire_add_sub_3_result_int = wire_add_sub_3_dataa - wire_add_sub_3_datab;
	assign
		wire_add_sub_3_result = wire_add_sub_3_result_int[3:0],
		wire_add_sub_3_cout = ~wire_add_sub_3_result_int[4:4];
	assign
		wire_add_sub_3_dataa = {StageIn[29:27], NumeratorIn[60]},
		wire_add_sub_3_datab = DenominatorIn[30:27];
	assign
		wire_add_sub_4_result_int = wire_add_sub_4_dataa - wire_add_sub_4_datab;
	assign
		wire_add_sub_4_result = wire_add_sub_4_result_int[4:0],
		wire_add_sub_4_cout = ~wire_add_sub_4_result_int[5:5];
	assign
		wire_add_sub_4_dataa = {StageIn[39:36], NumeratorIn[75]},
		wire_add_sub_4_datab = DenominatorIn[40:36];
	assign
		wire_add_sub_5_result_int = wire_add_sub_5_dataa - wire_add_sub_5_datab;
	assign
		wire_add_sub_5_result = wire_add_sub_5_result_int[5:0],
		wire_add_sub_5_cout = ~wire_add_sub_5_result_int[6:6];
	assign
		wire_add_sub_5_dataa = {StageIn[49:45], NumeratorIn[90]},
		wire_add_sub_5_datab = DenominatorIn[50:45];
	assign
		wire_add_sub_6_result_int = wire_add_sub_6_dataa - wire_add_sub_6_datab;
	assign
		wire_add_sub_6_result = wire_add_sub_6_result_int[6:0],
		wire_add_sub_6_cout = ~wire_add_sub_6_result_int[7:7];
	assign
		wire_add_sub_6_dataa = {StageIn[59:54], NumeratorIn[105]},
		wire_add_sub_6_datab = DenominatorIn[60:54];
	assign
		wire_add_sub_7_result_int = wire_add_sub_7_dataa - wire_add_sub_7_datab;
	assign
		wire_add_sub_7_result = wire_add_sub_7_result_int[7:0],
		wire_add_sub_7_cout = ~wire_add_sub_7_result_int[8:8];
	assign
		wire_add_sub_7_dataa = {StageIn[69:63], NumeratorIn[120]},
		wire_add_sub_7_datab = DenominatorIn[70:63];
	assign
		wire_add_sub_8_result_int = wire_add_sub_8_dataa - wire_add_sub_8_datab;
	assign
		wire_add_sub_8_result = wire_add_sub_8_result_int[8:0],
		wire_add_sub_8_cout = ~wire_add_sub_8_result_int[9:9];
	assign
		wire_add_sub_8_dataa = {StageIn[79:72], NumeratorIn[135]},
		wire_add_sub_8_datab = DenominatorIn[80:72];
	assign
		wire_add_sub_9_result_int = wire_add_sub_9_dataa - wire_add_sub_9_datab;
	assign
		wire_add_sub_9_result = wire_add_sub_9_result_int[8:0],
		wire_add_sub_9_cout = ~wire_add_sub_9_result_int[9:9];
	assign
		wire_add_sub_9_dataa = {StageIn[88:81], NumeratorIn[150]},
		wire_add_sub_9_datab = DenominatorIn[89:81];
	assign
		aclr = 1'b0,
		clk_en = 1'b1,
		DenominatorIn = DenominatorIn_tmp,
		DenominatorIn_tmp = {DenominatorIn[143:126], {gnd_wire, DFFDenominator[31:24]}, DenominatorIn[116:90], {gnd_wire, DFFDenominator[23:16]}, DenominatorIn[80:54], {gnd_wire, DFFDenominator[15:8]}, DenominatorIn[44:18], {gnd_wire, DFFDenominator[7:0]}, DenominatorIn[8:0], {gnd_wire, denominator}},
		gnd_wire = 1'b0,
		nose = {{16{1'b0}}, wire_add_sub_15_cout, {16{1'b0}}, wire_add_sub_14_cout, {16{1'b0}}, wire_add_sub_13_cout, {16{1'b0}}, wire_add_sub_12_cout, {16{1'b0}}, wire_add_sub_11_cout, {16{1'b0}}, wire_add_sub_10_cout, {16{1'b0}}, wire_add_sub_9_cout, {16{1'b0}}, wire_add_sub_8_cout, {16{1'b0}}, wire_add_sub_7_cout, {16{1'b0}}, wire_add_sub_6_cout, {16{1'b0}}, wire_add_sub_5_cout, {16{1'b0}}, wire_add_sub_4_cout, {16{1'b0}}, wire_add_sub_3_cout, {16{1'b0}}, wire_add_sub_2_cout, {16{1'b0}}, wire_add_sub_1_cout, {16{1'b0}}, wire_add_sub_0_cout},
		NumeratorIn = NumeratorIn_tmp,
		NumeratorIn_tmp = {NumeratorIn[255:224], DFFNumerator[63:48], NumeratorIn[207:160], DFFNumerator[47:32], NumeratorIn[143:96], DFFNumerator[31:16], NumeratorIn[79:32], DFFNumerator[15:0], NumeratorIn[15:0], numerator},
		prestg = {wire_add_sub_15_result, wire_add_sub_14_result, wire_add_sub_13_result, wire_add_sub_12_result, wire_add_sub_11_result, wire_add_sub_10_result, wire_add_sub_9_result, wire_add_sub_8_result, {1{1'b0}}, wire_add_sub_7_result, {2{1'b0}}, wire_add_sub_6_result, {3{1'b0}}, wire_add_sub_5_result, {4{1'b0}}, wire_add_sub_4_result, {5{1'b0}}, wire_add_sub_3_result, {6{1'b0}}, wire_add_sub_2_result, {7{1'b0}}, wire_add_sub_1_result, {8{1'b0}}, wire_add_sub_0_result},
		quotient = quotient_tmp,
		quotient_tmp = {DFFQuotient[63:50], (~ selnose[238]), (~ selnose[255])},
		remainder = StageIn[151:144],
		sel = {gnd_wire, (sel[135] | DenominatorIn[151]), (sel[134] | DenominatorIn[150]), (sel[133] | DenominatorIn[149]), (sel[132] | DenominatorIn[148]), (sel[131] | DenominatorIn[147]), (sel[130] | DenominatorIn[146]), (sel[129] | DenominatorIn[145]), gnd_wire, (sel[127] | DenominatorIn[142]), (sel[126] | DenominatorIn[141]), (sel[125] | DenominatorIn[140]), (sel[124] | DenominatorIn[139]), (sel[123] | DenominatorIn[138]), (sel[122] | DenominatorIn[137]), (sel[121] | DenominatorIn[136]), gnd_wire, (sel[119] | DenominatorIn[133]), (sel[118] | DenominatorIn[132]), (sel[117] | DenominatorIn[131]), (sel[116] | DenominatorIn[130]), (sel[115] | DenominatorIn[129]), (sel[114] | DenominatorIn[128]), (sel[113] | DenominatorIn[127]), gnd_wire, (sel[111] | DenominatorIn[124]), (sel[110] | DenominatorIn[123]), (sel[109] | DenominatorIn[122]), (sel[108] | DenominatorIn[121]), (sel[107] | DenominatorIn[120]), (sel[106] | DenominatorIn[119]), (sel[105] | DenominatorIn[118]), gnd_wire, (sel[103] | DenominatorIn[115]), (sel[102] | DenominatorIn[114]), (sel[101] | DenominatorIn[113]), (sel[100] | DenominatorIn[112]), (sel[99] | DenominatorIn[111]), (sel[98] | DenominatorIn[110]), (sel[97] | DenominatorIn[109]), gnd_wire, (sel[95] | DenominatorIn[106]), (sel[94] | DenominatorIn[105]), (sel[93] | DenominatorIn[104]), (sel[92] | DenominatorIn[103]), (sel[91] | DenominatorIn[102]), (sel[90] | DenominatorIn[101]), (sel[89] | DenominatorIn[100]), gnd_wire, (sel[87] | DenominatorIn[97]), (sel[86] | DenominatorIn[96]), (sel[85] | DenominatorIn[95]), (sel[84] | DenominatorIn[94]), (sel[83] | DenominatorIn[93]), (sel[82] | DenominatorIn[92]), (sel[81] | DenominatorIn[91]), gnd_wire, (sel[79] | DenominatorIn[88]), (sel[78] | DenominatorIn[87]), (sel[77] | DenominatorIn[86]), (sel[76] | DenominatorIn[85]), (sel[75] | DenominatorIn[84]), (sel[74] | DenominatorIn[83]), (sel[73] | DenominatorIn[82]), gnd_wire, (sel[71] | DenominatorIn[79]), (sel[70] | DenominatorIn[78]), (sel[69] | DenominatorIn[77]), (sel[68] | DenominatorIn[76]), (sel[67] | DenominatorIn[75]
), (sel[66] | DenominatorIn[74]), (sel[65] | DenominatorIn[73]), gnd_wire, (sel[63] | DenominatorIn[70]), (sel[62] | DenominatorIn[69]), (sel[61] | DenominatorIn[68]), (sel[60] | DenominatorIn[67]), (sel[59] | DenominatorIn[66]), (sel[58] | DenominatorIn[65]), (sel[57] | DenominatorIn[64]), gnd_wire, (sel[55] | DenominatorIn[61]), (sel[54] | DenominatorIn[60]), (sel[53] | DenominatorIn[59]), (sel[52] | DenominatorIn[58]), (sel[51] | DenominatorIn[57]), (sel[50] | DenominatorIn[56]), (sel[49] | DenominatorIn[55]), gnd_wire, (sel[47] | DenominatorIn[52]), (sel[46] | DenominatorIn[51]), (sel[45] | DenominatorIn[50]), (sel[44] | DenominatorIn[49]), (sel[43] | DenominatorIn[48]), (sel[42] | DenominatorIn[47]), (sel[41] | DenominatorIn[46]), gnd_wire, (sel[39] | DenominatorIn[43]), (sel[38] | DenominatorIn[42]), (sel[37] | DenominatorIn[41]), (sel[36] | DenominatorIn[40]), (sel[35] | DenominatorIn[39]), (sel[34] | DenominatorIn[38]), (sel[33] | DenominatorIn[37]), gnd_wire, (sel[31] | DenominatorIn[34]), (sel[30] | DenominatorIn[33]), (sel[29] | DenominatorIn[32]), (sel[28] | DenominatorIn[31]), (sel[27] | DenominatorIn[30]), (sel[26] | DenominatorIn[29]), (sel[25] | DenominatorIn[28]), gnd_wire, (sel[23] | DenominatorIn[25]), (sel[22] | DenominatorIn[24]), (sel[21] | DenominatorIn[23]), (sel[20] | DenominatorIn[22]), (sel[19] | DenominatorIn[21]), (sel[18] | DenominatorIn[20]), (sel[17] | DenominatorIn[19]), gnd_wire, (sel[15] | DenominatorIn[16]), (sel[14] | DenominatorIn[15]), (sel[13] | DenominatorIn[14]), (sel[12] | DenominatorIn[13]), (sel[11] | DenominatorIn[12]), (sel[10] | DenominatorIn[11]), (sel[9] | DenominatorIn[10]), gnd_wire, (sel[7] | DenominatorIn[7]), (sel[6] | DenominatorIn[6]), (sel[5] | DenominatorIn[5]), (sel[4] | DenominatorIn[4]), (sel[3] | DenominatorIn[3]), (sel[2] | DenominatorIn[2]), (sel[1] | DenominatorIn[1])},
		selnose = {(~ nose[271]), (~ nose[270]), (~ nose[269]), (~ nose[268]), (~ nose[267]), (~ nose[266]), (~ nose[265]), (~ nose[264]), ((~ nose[263]) | sel[135]), ((~ nose[262]) | sel[134]), ((~ nose[261]) | sel[133]), ((~ nose[260]) | sel[132]), ((~ nose[259]) | sel[131]), ((~ nose[258]) | sel[130]), ((~ nose[257]) | sel[129]), ((~ nose[256]) | sel[128]), (~ nose[255]), (~ nose[254]), (~ nose[253]), (~ nose[252]), (~ nose[251]), (~ nose[250]), (~ nose[249]), (~ nose[248]), ((~ nose[247]) | sel[127]), ((~ nose[246]) | sel[126]), ((~ nose[245]) | sel[125]), ((~ nose[244]) | sel[124]), ((~ nose[243]) | sel[123]), ((~ nose[242]) | sel[122]), ((~ nose[241]) | sel[121]), ((~ nose[240]) | sel[120]), (~ nose[239]), (~ nose[238]), (~ nose[237]), (~ nose[236]), (~ nose[235]), (~ nose[234]), (~ nose[233]), (~ nose[232]), ((~ nose[231]) | sel[119]), ((~ nose[230]) | sel[118]), ((~ nose[229]) | sel[117]), ((~ nose[228]) | sel[116]), ((~ nose[227]) | sel[115]), ((~ nose[226]) | sel[114]), ((~ nose[225]) | sel[113]), ((~ nose[224]) | sel[112]), (~ nose[223]), (~ nose[222]), (~ nose[221]), (~ nose[220]), (~ nose[219]), (~ nose[218]), (~ nose[217]), (~ nose[216]), ((~ nose[215]) | sel[111]), ((~ nose[214]) | sel[110]), ((~ nose[213]) | sel[109]), ((~ nose[212]) | sel[108]), ((~ nose[211]) | sel[107]), ((~ nose[210]) | sel[106]), ((~ nose[209]) | sel[105]), ((~ nose[208]) | sel[104]), (~ nose[207]), (~ nose[206]), (~ nose[205]), (~ nose[204]), (~ nose[203]), (~ nose[202]), (~ nose[201]), (~ nose[200]), ((~ nose[199]) | sel[103]), ((~ nose[198]) | sel[102]), ((~ nose[197]) | sel[101]), ((~ nose[196]) | sel[100]), ((~ nose[195]) | sel[99]), ((~ nose[194]) | sel[98]), ((~ nose[193]) | sel[97]), ((~ nose[192]) | sel[96]), (~ nose[191]), (~ nose[190]), (~ nose[189]), (~ nose[188]), (~ nose[187]), (~ nose[186]), (~ nose[185]), (~ nose[184]), ((~ nose[183]) | sel[95]), ((~ nose[182]) | sel[94]), ((~ nose[181]) | sel[93]), ((~ nose[180]) | sel[92]), ((~ nose[179]) | sel[91]), ((~ nose[178]) | sel[90]), ((~ nose[177]) | sel[89]), ((~ nose[176]
) | sel[88]), (~ nose[175]), (~ nose[174]), (~ nose[173]), (~ nose[172]), (~ nose[171]), (~ nose[170]), (~ nose[169]), (~ nose[168]), ((~ nose[167]) | sel[87]), ((~ nose[166]) | sel[86]), ((~ nose[165]) | sel[85]), ((~ nose[164]) | sel[84]), ((~ nose[163]) | sel[83]), ((~ nose[162]) | sel[82]), ((~ nose[161]) | sel[81]), ((~ nose[160]) | sel[80]), (~ nose[159]), (~ nose[158]), (~ nose[157]), (~ nose[156]), (~ nose[155]), (~ nose[154]), (~ nose[153]), (~ nose[152]), ((~ nose[151]) | sel[79]), ((~ nose[150]) | sel[78]), ((~ nose[149]) | sel[77]), ((~ nose[148]) | sel[76]), ((~ nose[147]) | sel[75]), ((~ nose[146]) | sel[74]), ((~ nose[145]) | sel[73]), ((~ nose[144]) | sel[72]), (~ nose[143]), (~ nose[142]), (~ nose[141]), (~ nose[140]), (~ nose[139]), (~ nose[138]), (~ nose[137]), (~ nose[136]), ((~ nose[135]) | sel[71]), ((~ nose[134]) | sel[70]), ((~ nose[133]) | sel[69]), ((~ nose[132]) | sel[68]), ((~ nose[131]) | sel[67]), ((~ nose[130]) | sel[66]), ((~ nose[129]) | sel[65]), ((~ nose[128]) | sel[64]), (~ nose[127]), (~ nose[126]), (~ nose[125]), (~ nose[124]), (~ nose[123]), (~ nose[122]), (~ nose[121]), (~ nose[120]), ((~ nose[119]) | sel[63]), ((~ nose[118]) | sel[62]), ((~ nose[117]) | sel[61]), ((~ nose[116]) | sel[60]), ((~ nose[115]) | sel[59]), ((~ nose[114]) | sel[58]), ((~ nose[113]) | sel[57]), ((~ nose[112]) | sel[56]), (~ nose[111]), (~ nose[110]), (~ nose[109]), (~ nose[108]), (~ nose[107]), (~ nose[106]), (~ nose[105]), (~ nose[104]), ((~ nose[103]) | sel[55]), ((~ nose[102]) | sel[54]), ((~ nose[101]) | sel[53]), ((~ nose[100]) | sel[52]), ((~ nose[99]) | sel[51]), ((~ nose[98]) | sel[50]), ((~ nose[97]) | sel[49]), ((~ nose[96]) | sel[48]), (~ nose[95]), (~ nose[94]), (~ nose[93]), (~ nose[92]), (~ nose[91]), (~ nose[90]), (~ nose[89]), (~ nose[88]), ((~ nose[87]) | sel[47]), ((~ nose[86]) | sel[46]), ((~ nose[85]) | sel[45]), ((~ nose[84]) | sel[44]), ((~ nose[83]) | sel[43]), ((~ nose[82]) | sel[42]), ((~ nose[81]) | sel[41]), ((~ nose[80]) | sel[40]), (~ nose[79]), (~ nose[78]), (~ nose[77]
), (~ nose[76]), (~ nose[75]), (~ nose[74]), (~ nose[73]), (~ nose[72]), ((~ nose[71]) | sel[39]), ((~ nose[70]) | sel[38]), ((~ nose[69]) | sel[37]), ((~ nose[68]) | sel[36]), ((~ nose[67]) | sel[35]), ((~ nose[66]) | sel[34]), ((~ nose[65]) | sel[33]), ((~ nose[64]) | sel[32]), (~ nose[63]), (~ nose[62]), (~ nose[61]), (~ nose[60]), (~ nose[59]), (~ nose[58]), (~ nose[57]), (~ nose[56]), ((~ nose[55]) | sel[31]), ((~ nose[54]) | sel[30]), ((~ nose[53]) | sel[29]), ((~ nose[52]) | sel[28]), ((~ nose[51]) | sel[27]), ((~ nose[50]) | sel[26]), ((~ nose[49]) | sel[25]), ((~ nose[48]) | sel[24]), (~ nose[47]), (~ nose[46]), (~ nose[45]), (~ nose[44]), (~ nose[43]), (~ nose[42]), (~ nose[41]), (~ nose[40]), ((~ nose[39]) | sel[23]), ((~ nose[38]) | sel[22]), ((~ nose[37]) | sel[21]), ((~ nose[36]) | sel[20]), ((~ nose[35]) | sel[19]), ((~ nose[34]) | sel[18]), ((~ nose[33]) | sel[17]), ((~ nose[32]) | sel[16]), (~ nose[31]), (~ nose[30]), (~ nose[29]), (~ nose[28]), (~ nose[27]), (~ nose[26]), (~ nose[25]), (~ nose[24]), ((~ nose[23]) | sel[15]), ((~ nose[22]) | sel[14]), ((~ nose[21]) | sel[13]), ((~ nose[20]) | sel[12]), ((~ nose[19]) | sel[11]), ((~ nose[18]) | sel[10]), ((~ nose[17]) | sel[9]), ((~ nose[16]) | sel[8]), (~ nose[15]), (~ nose[14]), (~ nose[13]), (~ nose[12]), (~ nose[11]), (~ nose[10]), (~ nose[9]), (~ nose[8]), ((~ nose[7]) | sel[7]), ((~ nose[6]) | sel[6]), ((~ nose[5]) | sel[5]), ((~ nose[4]) | sel[4]), ((~ nose[3]) | sel[3]), ((~ nose[2]) | sel[2]), ((~ nose[1]) | sel[1]), ((~ nose[0]) | sel[0])},
		StageIn = StageIn_tmp,
		StageIn_tmp = {StageOut[143:126], DFFStage[35:27], StageOut[116:90], DFFStage[26:18], StageOut[80:54], DFFStage[17:9], StageOut[44:18], DFFStage[8:0], StageOut[8:0], {9{1'b0}}},
		StageOut = {(({StageIn[142:135], NumeratorIn[240]} & {9{selnose[255]}}) | (prestg[143:135] & {9{(~ selnose[255])}})), (({StageIn[133:126], NumeratorIn[225]} & {9{selnose[238]}}) | (prestg[134:126] & {9{(~ selnose[238])}})), (({StageIn[124:117], NumeratorIn[210]} & {9{selnose[221]}}) | (prestg[125:117] & {9{(~ selnose[221])}})), (({StageIn[115:108], NumeratorIn[195]} & {9{selnose[204]}}) | (prestg[116:108] & {9{(~ selnose[204])}})), (({StageIn[106:99], NumeratorIn[180]} & {9{selnose[187]}}) | (prestg[107:99] & {9{(~ selnose[187])}})), (({StageIn[97:90], NumeratorIn[165]} & {9{selnose[170]}}) | (prestg[98:90] & {9{(~ selnose[170])}})), (({StageIn[88:81], NumeratorIn[150]} & {9{selnose[153]}}) | (prestg[89:81] & {9{(~ selnose[153])}})), (({StageIn[79:72], NumeratorIn[135]} & {9{selnose[136]}}) | (prestg[80:72] & {9{(~ selnose[136])}})), (({StageIn[70:63], NumeratorIn[120]} & {9{selnose[119]}}) | (prestg[71:63] & {9{(~ selnose[119])}})), (({StageIn[61:54], NumeratorIn[105]} & {9{selnose[102]}}) | (prestg[62:54] & {9{(~ selnose[102])}})), (({StageIn[52:45], NumeratorIn[90]} & {9{selnose[85]}}) | (prestg[53:45] & {9{(~ selnose[85])}})), (({StageIn[43:36], NumeratorIn[75]} & {9{selnose[68]}}) | (prestg[44:36] & {9{(~ selnose[68])}})), (({StageIn[34:27], NumeratorIn[60]} & {9{selnose[51]}}) | (prestg[35:27] & {9{(~ selnose[51])}})), (({StageIn[25:18], NumeratorIn[45]} & {9{selnose[34]}}) | (prestg[26:18] & {9{(~ selnose[34])}})), (({StageIn[16:9], NumeratorIn[30]} & {9{selnose[17]}}) | (prestg[17:9] & {9{(~ selnose[17])}})), (({StageIn[7:0], NumeratorIn[15]} & {9{selnose[0]}}) | (prestg[8:0] & {9{(~ selnose[0])}}))},
		vcc_wire = 1'b1;
endmodule //LPMDiv16_8_alt_u_div

//synthesis_resources = lut 119 reg 196 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  LPMDiv16_8_sign_div_unsign
	( 
	clock,
	denominator,
	numerator,
	quotient,
	remainder) /* synthesis synthesis_clearbox=1 */;
	input   clock;
	input   [7:0]  denominator;
	input   [15:0]  numerator;
	output   [15:0]  quotient;
	output   [7:0]  remainder;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   clock;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire  [15:0]   wire_divider_quotient;
	wire  [7:0]   wire_divider_remainder;
	wire  [15:0]  norm_num;
	wire  [15:0]  protect_quotient;
	wire  [7:0]  protect_remainder;

	LPMDiv16_8_alt_u_div   divider
	( 
	.clock(clock),
	.denominator(denominator),
	.numerator(norm_num),
	.quotient(wire_divider_quotient),
	.remainder(wire_divider_remainder));
	assign
		norm_num = numerator,
		protect_quotient = wire_divider_quotient,
		protect_remainder = wire_divider_remainder,
		quotient = protect_quotient,
		remainder = protect_remainder;
endmodule //LPMDiv16_8_sign_div_unsign

//synthesis_resources = lut 119 reg 196 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  LPMDiv16_8_lpm_divide
	( 
	clock,
	denom,
	numer,
	quotient,
	remain) /* synthesis synthesis_clearbox=1 */;
	input   clock;
	input   [7:0]  denom;
	input   [15:0]  numer;
	output   [15:0]  quotient;
	output   [7:0]  remain;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   clock;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire  [15:0]   wire_divider_quotient;
	wire  [7:0]   wire_divider_remainder;
	wire  [15:0]  numer_tmp;

	LPMDiv16_8_sign_div_unsign   divider
	( 
	.clock(clock),
	.denominator(denom),
	.numerator(numer_tmp),
	.quotient(wire_divider_quotient),
	.remainder(wire_divider_remainder));
	assign
		numer_tmp = numer,
		quotient = wire_divider_quotient,
		remain = wire_divider_remainder;
endmodule //LPMDiv16_8_lpm_divide
//VALID FILE


// synopsys translate_off
`timescale 1 ps / 1 ps
// synopsys translate_on
module LPMDiv16_8 (
	clock,
	denom,
	numer,
	quotient,
	remain)/* synthesis synthesis_clearbox = 1 */;

	input	  clock;
	input	[7:0]  denom;
	input	[15:0]  numer;
	output	[15:0]  quotient;
	output	[7:0]  remain;

	wire [15:0] sub_wire0;
	wire [7:0] sub_wire1;
	wire [15:0] quotient = sub_wire0[15:0];
	wire [7:0] remain = sub_wire1[7:0];

	LPMDiv16_8_lpm_divide	LPMDiv16_8_lpm_divide_component (
				.clock (clock),
				.denom (denom),
				.numer (numer),
				.quotient (sub_wire0),
				.remain (sub_wire1));

endmodule

// ============================================================
// CNX file retrieval info
// ============================================================
// Retrieval info: PRIVATE: INTENDED_DEVICE_FAMILY STRING "Cyclone IV E"
// Retrieval info: PRIVATE: PRIVATE_LPM_REMAINDERPOSITIVE STRING "TRUE"
// Retrieval info: PRIVATE: PRIVATE_MAXIMIZE_SPEED NUMERIC "6"
// Retrieval info: PRIVATE: SYNTH_WRAPPER_GEN_POSTFIX STRING "1"
// Retrieval info: PRIVATE: USING_PIPELINE NUMERIC "1"
// Retrieval info: PRIVATE: VERSION_NUMBER NUMERIC "2"
// Retrieval info: PRIVATE: new_diagram STRING "1"
// Retrieval info: LIBRARY: lpm lpm.lpm_components.all
// Retrieval info: CONSTANT: LPM_DREPRESENTATION STRING "UNSIGNED"
// Retrieval info: CONSTANT: LPM_HINT STRING "MAXIMIZE_SPEED=6,LPM_REMAINDERPOSITIVE=TRUE"
// Retrieval info: CONSTANT: LPM_NREPRESENTATION STRING "UNSIGNED"
// Retrieval info: CONSTANT: LPM_PIPELINE NUMERIC "4"
// Retrieval info: CONSTANT: LPM_TYPE STRING "LPM_DIVIDE"
// Retrieval info: CONSTANT: LPM_WIDTHD NUMERIC "8"
// Retrieval info: CONSTANT: LPM_WIDTHN NUMERIC "16"
// Retrieval info: USED_PORT: clock 0 0 0 0 INPUT NODEFVAL "clock"
// Retrieval info: USED_PORT: denom 0 0 8 0 INPUT NODEFVAL "denom[7..0]"
// Retrieval info: USED_PORT: numer 0 0 16 0 INPUT NODEFVAL "numer[15..0]"
// Retrieval info: USED_PORT: quotient 0 0 16 0 OUTPUT NODEFVAL "quotient[15..0]"
// Retrieval info: USED_PORT: remain 0 0 8 0 OUTPUT NODEFVAL "remain[7..0]"
// Retrieval info: CONNECT: @clock 0 0 0 0 clock 0 0 0 0
// Retrieval info: CONNECT: @denom 0 0 8 0 denom 0 0 8 0
// Retrieval info: CONNECT: @numer 0 0 16 0 numer 0 0 16 0
// Retrieval info: CONNECT: quotient 0 0 16 0 @quotient 0 0 16 0
// Retrieval info: CONNECT: remain 0 0 8 0 @remain 0 0 8 0
// Retrieval info: GEN_FILE: TYPE_NORMAL LPMDiv16_8.v TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL LPMDiv16_8.inc FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL LPMDiv16_8.cmp FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL LPMDiv16_8.bsf FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL LPMDiv16_8_inst.v FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL LPMDiv16_8_bb.v FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL LPMDiv16_8_syn.v TRUE
// Retrieval info: LIB_FILE: lpm
