module ComputeColor(
	// 5 bits for red and green, 6 bits for blue
	input logic[15:0] color_in,
	// These two vectors are in Q6.12
	input logic[17:0] normal[2:0],
	input logic[17:0] light_vec[2:0],

	output logic[15:0] color_out,
);
	// Q0.8 numbers representing how much of the light is ambient / diffuse
	parameter[7:0] AMBIENT_PORTION = 8'd26;
	parameter[7:0] DIFFUSE_PORTION = 8'd230;

	// total color = ambient * color + diffuse * (normal . light_vec) * color
	logic[4:0] r_in, b_in, r_out, b_out;
	logic[5:0] g_in, g_out; 

	assign r_in = color_in[15:11];
	assign g_in = color_in[10:5];
	assign b_in = color_in[4:0];

	// Compute normal . light_vec in Q6.12 (really only 1 left bit and 8 right bits matter)
	logic[17:0] cos;
	DotProduct dp(.v1(normal), .v2(light_vec), .result(cos));

	logic[35:0] diffuse_factor_raw;
	logic[7:0] diffuse_factor;
	LPMMult18_18 diffuse_factor_mult(.dataa({9'd0, cos[12:4]}), .datab({10'd0, DIFFUSE_PORTION}), .result(diffuse_factor_raw));
	// If the normal and light_vec are aligned, it isn't lit, so make it zero
	// Otherwise, make it negative of the dot product to get truncated positive cos(theta)
	assign diffuse_factor = ~cos[17] ? 8'd0 : (~diffuse_factor_raw[15:8] + 8'd1);

	// Compute ambient components
	logic[35:0] r_amb_full, g_amb_full, b_amb_full;
	logic[4:0] r_amb, b_amb;
	logic[5:0] g_amb;
	LPMMult18_18 amb_mult_r(.dataa({13'd0, r_in}), .datab({10'd0, AMBIENT_PORTION}), .result(r_amb_full));
	LPMMult18_18 amb_mult_g(.dataa({12'd0, g_in}), .datab({10'd0, AMBIENT_PORTION}), .result(g_amb_full));
	LPMMult18_18 amb_mult_b(.dataa({13'd0, b_in}), .datab({10'd0, AMBIENT_PORTION}), .result(b_amb_full));
	assign r_amb = r_amb_full[12:8];
	assign b_amb = b_amb_full[12:8];
	assign g_amb = g_amb_full[13:8];

	// Compute diffuse components
	logic[35:0] r_diff_full, g_diff_full, b_diff_full;
	logic[4:0] r_diff, b_diff;
	logic[5:0] g_diff;
	LPMMult18_18 diff_mult_r(.dataa({13'd0, r_in}), .datab({10'd0, diffuse_factor}), .result(r_diff_full));
	LPMMult18_18 diff_mult_g(.dataa({12'd0, g_in}), .datab({10'd0, diffuse_factor}), .result(g_diff_full));
	LPMMult18_18 diff_mult_b(.dataa({13'd0, b_in}), .datab({10'd0, diffuse_factor}), .result(b_diff_full));
	assign r_diff = r_diff_full[12:8];
	assign b_diff = b_diff_full[12:8];
	assign g_diff = g_diff_full[13:8];

	assign r_out = r_amb + r_diff;
	assign g_out = g_amb + g_diff;
	assign b_out = b_amb + b_diff;
	assign color_out = {r_out, g_out, b_out};

endmodule 